#include <bits/stdc++.h>

using namespace std;

const int N = 10000005;
int n, k, dp[10005][10005], a[10005], b[10005];
vector<int> kq, vt;
int even = 0;

void Trace(int i, int j){
    //if(i==0 || j==0) return;
    if(i+j <= n){
        if(dp[i][j] == 1+dp[i-1][j-1] && a[i] == b[j]){
            Trace(i-1, j-1);
            if(i+j == n) even = 1;
            else even = 0;
            kq.push_back(a[i]);
            vt.push_back(i);
        }
        else if(dp[i][j] == dp[i][j-1]){
            Trace(i, j-1);
            return;
        }
        else if(dp[i][j] == dp[i-1][j]){
            Trace(i-1, j);
            return;
        }
    }
}

int main(){
    cin >> n;
    for(int i=1; i<=n; i++){
        cin >> a[i];
        b[n-i+1] = a[i];
    }
    for(int i=0; i<=n; i++){
        for(int j=0; j<=n; j++){
            dp[i][j] = 0;
        }
    }
    int ans = 0;
    for(int i=1; i<=n; i++){
        for(int j=1; j<=n; j++){
            if(i+j <= n){
                int res = 0;
                if(a[i] == b[j]){
                    res = max(res, 1 + dp[i-1][j-1]);
                }
                res = max(res, dp[i][j-1]);
                res = max(res, dp[i-1][j]);
                dp[i][j] = res;
            }
        }
    }
    int i, j;
    for(i=1; i<=n; i++){
        if(ans < dp[i][n-i]){
            ans = dp[i][n-i];
            j = n-i;
        }
    }
    i = n-j;
    Trace(i, j);
    if(even == 1){
        ans = ans + ans;
        cout << ans << endl;
        for(int i=0; i<kq.size(); i++){
            cout << kq.at(i) << " ";
        }
        for(int i=kq.size()-1; i>=0; i--){
            cout << kq.at(i) << " ";
        }
    }
    else{
        ans = ans + ans + 1;
        cout << ans << endl;
        for(int i=0; i<kq.size(); i++){
            cout << kq.at(i) << " ";
        }
        cout << a[vt.at(vt.size()-1)+1] << " ";
        for(int i=0; i<kq.size(); i++){
            cout << kq.at(i) << " ";
        }
    }
    return 0;
}
