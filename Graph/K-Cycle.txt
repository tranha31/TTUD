// CPP Program to count cycles of length n
// in a given graph.
#include <bits/stdc++.h>
using namespace std;

// Number of vertices
int V, E, n;
const int N = 100005;
vector<bool> graph[N];

void DFS(bool marked[], int n,
			int vert, int start, int &count)
{
	// mark the vertex vert as visited
	marked[vert] = true;

	// if the path of length (n-1) is found
	if (n == 0) {

		// mark vert as un-visited to make
		// it usable again.
		marked[vert] = false;

		// Check if vertex vert can end with
		// vertex start
		if (graph[vert][start])
		{
			count++;
			return;
		} else
			return;
	}

	// For searching every possible path of
	// length (n-1)
	for (int i = 0; i < V; i++)
		if (!marked[i] && graph[vert][i])

			// DFS for searching path by decreasing
			// length by 1
			DFS(marked, n-1, i, start, count);

	// marking vert as unvisited to make it
	// usable again.
	marked[vert] = false;
}

// Counts cycles of length N in an undirected
// and connected graph.
int countCycles(int n)
{
	// all vertex are marked un-visited initially.
	bool marked[V];
	memset(marked, 0, sizeof(marked));

	// Searching for cycle by using v-n+1 vertices
	int count = 0;
	for (int i = 0; i < V - (n - 1); i++) {
		DFS(marked, n-1, i, i, count);

		// ith vertex is marked as visited and
		// will not be visited again.
		marked[i] = true;
	}

	return count/2;
}

int main()
{
    cin >> V >> E >> n;
    set<int> s[V+1];
    for(int i=1; i<=E; i++){
        int u, v;
        cin >> u >> v;
        s[u].insert(v);
        s[v].insert(u);
    }
    for(int i=0; i<V; i++){
        for(int j=0; j<V; j++){
            if(j == i) graph[i].push_back(0);
            else{
                if(s[i+1].find(j+1) != s[i+1].end()){
                    graph[i].push_back(1);
                }
                else{
                    graph[i].push_back(0);
                }
            }
        }
    }
	cout << countCycles(n);
    return 0;
}
