#include <bits/stdc++.h>
using namespace std;
 
const int N = 100005;
 
// mot canh khi them vao ma tao thanh chu trinh
// => 2 dau mut thuoc cung thanh phan lien thong
 
// Cau truc du lieu:
// them mot canh vao do thi
// tra loi xem 2 dinh co cung thanh phan lien thong hay khong
 
// Disjoint Set
 
struct DisjointSet {
        vector<int> p;
 
        DisjointSet(int n) {
                p.resize(n + 5);
                for (int i = 1; i <= n; i++) {
                        p[i] = i;
                }
        }
 
        int root(int x) {
                return (p[x] == x ? x : p[x] = root(p[x]));
        }
 
        void addEdge(int u, int v) {
                u = root(u);
                v = root(v);
                if (u != v) {
                        p[u] = v;
                }
        }
 
        bool inTheSameSet(int u, int v) {
                return root(u) == root(v);
        }
};
 
struct Edge {
        int u, v, w;
};
 
int32_t main() {
        ios::sync_with_stdio(false); cin.tie(0);
 
        int n, m;
        cin >> n >> m;
 
        vector<Edge> edges(m);
        for (int i = 0; i < m; i++) {
                cin >> edges[i].u >> edges[i].v >> edges[i].w;
        }
 
        sort(edges.begin(), edges.end(), [&](Edge &lhs, Edge &rhs) {
                return lhs.w < rhs.w;
        });
 
        DisjointSet disjointSet = DisjointSet(n);
 
        long long ans = 0;
 
        for (Edge edge : edges) {
                if (!disjointSet.inTheSameSet(edge.u, edge.v)) {
                        disjointSet.addEdge(edge.u, edge.v);
                        ans += edge.w;
                }
        }
 
        cout << ans << '\n';
 
        return 0;
}